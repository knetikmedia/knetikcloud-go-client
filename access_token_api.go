/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
)

type AccessTokenApi struct {
	Configuration *Configuration
}

func NewAccessTokenApi() *AccessTokenApi {
	configuration := NewConfiguration()
	return &AccessTokenApi{
		Configuration: configuration,
	}
}

func NewAccessTokenApiWithBasePath(basePath string) *AccessTokenApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &AccessTokenApi{
		Configuration: configuration,
	}
}

/**
 * Get access token
 *
 * @param grantType Grant type
 * @param clientId The id of the client
 * @param clientSecret The secret key of the client.  Used only with a grant_type of client_credentials
 * @param username The username of the client.  Used only with a grant_type of password
 * @param password The password of the client.  Used only with a grant_type of password
 * @return *OAuth2Resource
 */
func (a AccessTokenApi) GetOAuthToken(grantType string, clientId string, clientSecret string, username string, password string) (*OAuth2Resource, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams["grantType"] = a.Configuration.APIClient.ParameterToString(grantType, "")
	localVarFormParams["clientId"] = a.Configuration.APIClient.ParameterToString(clientId, "")
	localVarFormParams["clientSecret"] = a.Configuration.APIClient.ParameterToString(clientSecret, "")
	localVarFormParams["username"] = a.Configuration.APIClient.ParameterToString(username, "")
	localVarFormParams["password"] = a.Configuration.APIClient.ParameterToString(password, "")
	var successPayload = new(OAuth2Resource)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetOAuthToken", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}


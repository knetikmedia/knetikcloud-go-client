/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"errors"
	"io"
	"mime/multipart"
    "golang.org/x/oauth2"
    "golang.org/x/net/context"
	"net/http"
	"net/url"
	"time"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strings"
	"unicode/utf8"
	"strconv"
)

var (
	jsonCheck = regexp.MustCompile("(?i:[application|text]/json)")
	xmlCheck = regexp.MustCompile("(?i:[application|text]/xml)")
)

// APIClient manages communication with the Knetik Platform API Documentation latest  API vlatest 
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg 	*Configuration
	common 	service 		// Reuse a single struct instead of allocating one for each service on the heap.

	 // API Services
	Access_TokenApi	*Access_TokenApiService
	ActivitiesApi	*ActivitiesApiService
	Amazon_Web_Services_S3Api	*Amazon_Web_Services_S3ApiService
	Auth_ClientsApi	*Auth_ClientsApiService
	Auth_PermissionsApi	*Auth_PermissionsApiService
	Auth_RolesApi	*Auth_RolesApiService
	Auth_TokensApi	*Auth_TokensApiService
	CampaignsApi	*CampaignsApiService
	Campaigns_ChallengesApi	*Campaigns_ChallengesApiService
	Campaigns_RewardsApi	*Campaigns_RewardsApiService
	CategoriesApi	*CategoriesApiService
	ChatApi	*ChatApiService
	ConfigsApi	*ConfigsApiService
	Content_ArticlesApi	*Content_ArticlesApiService
	Content_CommentsApi	*Content_CommentsApiService
	CurrenciesApi	*CurrenciesApiService
	DevicesApi	*DevicesApiService
	DispositionsApi	*DispositionsApiService
	FulfillmentApi	*FulfillmentApiService
	Gamification_AchievementsApi	*Gamification_AchievementsApiService
	Gamification_LeaderboardsApi	*Gamification_LeaderboardsApiService
	Gamification_LevelingApi	*Gamification_LevelingApiService
	Gamification_MetricsApi	*Gamification_MetricsApiService
	Gamification_TriviaApi	*Gamification_TriviaApiService
	InvoicesApi	*InvoicesApiService
	LocationsApi	*LocationsApiService
	LogsApi	*LogsApiService
	Media_ArtistsApi	*Media_ArtistsApiService
	Media_ModerationApi	*Media_ModerationApiService
	Media_PollsApi	*Media_PollsApiService
	Media_VideosApi	*Media_VideosApiService
	MessagingApi	*MessagingApiService
	Messaging_TopicsApi	*Messaging_TopicsApiService
	NotificationsApi	*NotificationsApiService
	ObjectsApi	*ObjectsApiService
	PaymentsApi	*PaymentsApiService
	Payments_AppleApi	*Payments_AppleApiService
	Payments_FattMerchantApi	*Payments_FattMerchantApiService
	Payments_OptimalApi	*Payments_OptimalApiService
	Payments_PayPalClassicApi	*Payments_PayPalClassicApiService
	Payments_StripeApi	*Payments_StripeApiService
	Payments_TransactionsApi	*Payments_TransactionsApiService
	Payments_WalletsApi	*Payments_WalletsApiService
	Payments_XsollaApi	*Payments_XsollaApiService
	Reporting_ChallengesApi	*Reporting_ChallengesApiService
	Reporting_OrdersApi	*Reporting_OrdersApiService
	Reporting_RevenueApi	*Reporting_RevenueApiService
	Reporting_SubscriptionsApi	*Reporting_SubscriptionsApiService
	Reporting_UsageApi	*Reporting_UsageApiService
	Reporting_UsersApi	*Reporting_UsersApiService
	Rule_Engine_ActionsApi	*Rule_Engine_ActionsApiService
	Rule_Engine_EventsApi	*Rule_Engine_EventsApiService
	Rule_Engine_ExpressionsApi	*Rule_Engine_ExpressionsApiService
	Rule_Engine_GlobalsApi	*Rule_Engine_GlobalsApiService
	Rule_Engine_RulesApi	*Rule_Engine_RulesApiService
	Rule_Engine_TriggersApi	*Rule_Engine_TriggersApiService
	Rule_Engine_VariablesApi	*Rule_Engine_VariablesApiService
	SearchApi	*SearchApiService
	Social_FacebookApi	*Social_FacebookApiService
	Social_GoogleApi	*Social_GoogleApiService
	StoreApi	*StoreApiService
	Store_BundlesApi	*Store_BundlesApiService
	Store_CouponsApi	*Store_CouponsApiService
	Store_SalesApi	*Store_SalesApiService
	Store_ShippingApi	*Store_ShippingApiService
	Store_Shopping_CartsApi	*Store_Shopping_CartsApiService
	Store_SubscriptionsApi	*Store_SubscriptionsApiService
	Store_VendorsApi	*Store_VendorsApiService
	TaxesApi	*TaxesApiService
	Templates_PropertiesApi	*Templates_PropertiesApiService
	UsersApi	*UsersApiService
	Users_AddressesApi	*Users_AddressesApiService
	Users_FriendshipsApi	*Users_FriendshipsApiService
	Users_GroupsApi	*Users_GroupsApiService
	Users_InventoryApi	*Users_InventoryApiService
	Users_RelationshipsApi	*Users_RelationshipsApiService
	Users_SubscriptionsApi	*Users_SubscriptionsApiService
	Util_BatchApi	*Util_BatchApiService
	Util_HealthApi	*Util_HealthApiService
	Util_MaintenanceApi	*Util_MaintenanceApiService
	Util_SecurityApi	*Util_SecurityApiService
	Util_VersionApi	*Util_VersionApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.Access_TokenApi = (*Access_TokenApiService)(&c.common)
	c.ActivitiesApi = (*ActivitiesApiService)(&c.common)
	c.Amazon_Web_Services_S3Api = (*Amazon_Web_Services_S3ApiService)(&c.common)
	c.Auth_ClientsApi = (*Auth_ClientsApiService)(&c.common)
	c.Auth_PermissionsApi = (*Auth_PermissionsApiService)(&c.common)
	c.Auth_RolesApi = (*Auth_RolesApiService)(&c.common)
	c.Auth_TokensApi = (*Auth_TokensApiService)(&c.common)
	c.CampaignsApi = (*CampaignsApiService)(&c.common)
	c.Campaigns_ChallengesApi = (*Campaigns_ChallengesApiService)(&c.common)
	c.Campaigns_RewardsApi = (*Campaigns_RewardsApiService)(&c.common)
	c.CategoriesApi = (*CategoriesApiService)(&c.common)
	c.ChatApi = (*ChatApiService)(&c.common)
	c.ConfigsApi = (*ConfigsApiService)(&c.common)
	c.Content_ArticlesApi = (*Content_ArticlesApiService)(&c.common)
	c.Content_CommentsApi = (*Content_CommentsApiService)(&c.common)
	c.CurrenciesApi = (*CurrenciesApiService)(&c.common)
	c.DevicesApi = (*DevicesApiService)(&c.common)
	c.DispositionsApi = (*DispositionsApiService)(&c.common)
	c.FulfillmentApi = (*FulfillmentApiService)(&c.common)
	c.Gamification_AchievementsApi = (*Gamification_AchievementsApiService)(&c.common)
	c.Gamification_LeaderboardsApi = (*Gamification_LeaderboardsApiService)(&c.common)
	c.Gamification_LevelingApi = (*Gamification_LevelingApiService)(&c.common)
	c.Gamification_MetricsApi = (*Gamification_MetricsApiService)(&c.common)
	c.Gamification_TriviaApi = (*Gamification_TriviaApiService)(&c.common)
	c.InvoicesApi = (*InvoicesApiService)(&c.common)
	c.LocationsApi = (*LocationsApiService)(&c.common)
	c.LogsApi = (*LogsApiService)(&c.common)
	c.Media_ArtistsApi = (*Media_ArtistsApiService)(&c.common)
	c.Media_ModerationApi = (*Media_ModerationApiService)(&c.common)
	c.Media_PollsApi = (*Media_PollsApiService)(&c.common)
	c.Media_VideosApi = (*Media_VideosApiService)(&c.common)
	c.MessagingApi = (*MessagingApiService)(&c.common)
	c.Messaging_TopicsApi = (*Messaging_TopicsApiService)(&c.common)
	c.NotificationsApi = (*NotificationsApiService)(&c.common)
	c.ObjectsApi = (*ObjectsApiService)(&c.common)
	c.PaymentsApi = (*PaymentsApiService)(&c.common)
	c.Payments_AppleApi = (*Payments_AppleApiService)(&c.common)
	c.Payments_FattMerchantApi = (*Payments_FattMerchantApiService)(&c.common)
	c.Payments_OptimalApi = (*Payments_OptimalApiService)(&c.common)
	c.Payments_PayPalClassicApi = (*Payments_PayPalClassicApiService)(&c.common)
	c.Payments_StripeApi = (*Payments_StripeApiService)(&c.common)
	c.Payments_TransactionsApi = (*Payments_TransactionsApiService)(&c.common)
	c.Payments_WalletsApi = (*Payments_WalletsApiService)(&c.common)
	c.Payments_XsollaApi = (*Payments_XsollaApiService)(&c.common)
	c.Reporting_ChallengesApi = (*Reporting_ChallengesApiService)(&c.common)
	c.Reporting_OrdersApi = (*Reporting_OrdersApiService)(&c.common)
	c.Reporting_RevenueApi = (*Reporting_RevenueApiService)(&c.common)
	c.Reporting_SubscriptionsApi = (*Reporting_SubscriptionsApiService)(&c.common)
	c.Reporting_UsageApi = (*Reporting_UsageApiService)(&c.common)
	c.Reporting_UsersApi = (*Reporting_UsersApiService)(&c.common)
	c.Rule_Engine_ActionsApi = (*Rule_Engine_ActionsApiService)(&c.common)
	c.Rule_Engine_EventsApi = (*Rule_Engine_EventsApiService)(&c.common)
	c.Rule_Engine_ExpressionsApi = (*Rule_Engine_ExpressionsApiService)(&c.common)
	c.Rule_Engine_GlobalsApi = (*Rule_Engine_GlobalsApiService)(&c.common)
	c.Rule_Engine_RulesApi = (*Rule_Engine_RulesApiService)(&c.common)
	c.Rule_Engine_TriggersApi = (*Rule_Engine_TriggersApiService)(&c.common)
	c.Rule_Engine_VariablesApi = (*Rule_Engine_VariablesApiService)(&c.common)
	c.SearchApi = (*SearchApiService)(&c.common)
	c.Social_FacebookApi = (*Social_FacebookApiService)(&c.common)
	c.Social_GoogleApi = (*Social_GoogleApiService)(&c.common)
	c.StoreApi = (*StoreApiService)(&c.common)
	c.Store_BundlesApi = (*Store_BundlesApiService)(&c.common)
	c.Store_CouponsApi = (*Store_CouponsApiService)(&c.common)
	c.Store_SalesApi = (*Store_SalesApiService)(&c.common)
	c.Store_ShippingApi = (*Store_ShippingApiService)(&c.common)
	c.Store_Shopping_CartsApi = (*Store_Shopping_CartsApiService)(&c.common)
	c.Store_SubscriptionsApi = (*Store_SubscriptionsApiService)(&c.common)
	c.Store_VendorsApi = (*Store_VendorsApiService)(&c.common)
	c.TaxesApi = (*TaxesApiService)(&c.common)
	c.Templates_PropertiesApi = (*Templates_PropertiesApiService)(&c.common)
	c.UsersApi = (*UsersApiService)(&c.common)
	c.Users_AddressesApi = (*Users_AddressesApiService)(&c.common)
	c.Users_FriendshipsApi = (*Users_FriendshipsApiService)(&c.common)
	c.Users_GroupsApi = (*Users_GroupsApiService)(&c.common)
	c.Users_InventoryApi = (*Users_InventoryApiService)(&c.common)
	c.Users_RelationshipsApi = (*Users_RelationshipsApiService)(&c.common)
	c.Users_SubscriptionsApi = (*Users_SubscriptionsApiService)(&c.common)
	c.Util_BatchApi = (*Util_BatchApiService)(&c.common)
	c.Util_HealthApi = (*Util_HealthApiService)(&c.common)
	c.Util_MaintenanceApi = (*Util_MaintenanceApiService)(&c.common)
	c.Util_SecurityApi = (*Util_SecurityApiService)(&c.common)
	c.Util_VersionApi = (*Util_VersionApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}


// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request. 
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	 return c.cfg.HTTPClient.Do(request)
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath (path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest (
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form paramters and file if available.
	if len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}
		
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	// Setup path and query paramters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}
	
	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)
	
	// Walk through any authentication.
	if ctx != nil {
		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer " + auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	
	return localVarRequest, nil
}


// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) (error) {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()
	
	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}


// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) (time.Time) {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)
	
	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) (int) {
	return utf8.RuneCountInString(s)
}


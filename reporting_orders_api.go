/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
	"fmt"
)

type ReportingOrdersApi struct {
	Configuration *Configuration
}

func NewReportingOrdersApi() *ReportingOrdersApi {
	configuration := NewConfiguration()
	return &ReportingOrdersApi{
		Configuration: configuration,
	}
}

func NewReportingOrdersApiWithBasePath(basePath string) *ReportingOrdersApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &ReportingOrdersApi{
		Configuration: configuration,
	}
}

/**
 * Retrieve invoice counts aggregated by time ranges
 *
 * @param currencyCode The code for a currency to get sales data for
 * @param granularity The time duration to aggregate by
 * @param filterPaymentStatus A payment status to filter results by, can be a comma separated list
 * @param filterFulfillmentStatus An invoice fulfillment status to filter results by, can be a comma separated list
 * @param startDate The start of the time range to return, unix timestamp in seconds. Default is beginning of time
 * @param endDate The end of the time range to return, unix timestamp in seconds. Default is end of time
 * @return *PageAggregateInvoiceReportResource
 */
func (a ReportingOrdersApi) GetDailyInvoicesUsingGET(currencyCode string, granularity string, filterPaymentStatus string, filterFulfillmentStatus string, startDate int64, endDate int64) (*PageAggregateInvoiceReportResource, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/orders/count/{currency_code}"
	localVarPath = strings.Replace(localVarPath, "{"+"currency_code"+"}", fmt.Sprintf("%v", currencyCode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("granularity", a.Configuration.APIClient.ParameterToString(granularity, ""))
	localVarQueryParams.Add("filter_payment_status", a.Configuration.APIClient.ParameterToString(filterPaymentStatus, ""))
	localVarQueryParams.Add("filter_fulfillment_status", a.Configuration.APIClient.ParameterToString(filterFulfillmentStatus, ""))
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"*/*",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageAggregateInvoiceReportResource)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetDailyInvoicesUsingGET", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}


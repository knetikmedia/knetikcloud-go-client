/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
)

type ReportingUsageApi struct {
	Configuration *Configuration
}

func NewReportingUsageApi() *ReportingUsageApi {
	configuration := NewConfiguration()
	return &ReportingUsageApi{
		Configuration: configuration,
	}
}

func NewReportingUsageApiWithBasePath(basePath string) *ReportingUsageApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &ReportingUsageApi{
		Configuration: configuration,
	}
}

/**
 * Returns aggregated endpoint usage information by day
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
 * @param method Filter for a certain endpoint method.  Must include url as well to work
 * @param url Filter for a certain endpoint.  Must include method as well to work
 * @param size The number of objects returned per page
 * @param page The number of the page returned, starting with 1
 * @return *PageResourceUsageInfo
 */
func (a ReportingUsageApi) GetUsageByDay(startDate int64, endDate int64, combineEndpoints bool, method string, url string, size int32, page int32) (*PageResourceUsageInfo, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/day"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))
	localVarQueryParams.Add("combine_endpoints", a.Configuration.APIClient.ParameterToString(combineEndpoints, ""))
	localVarQueryParams.Add("method", a.Configuration.APIClient.ParameterToString(method, ""))
	localVarQueryParams.Add("url", a.Configuration.APIClient.ParameterToString(url, ""))
	localVarQueryParams.Add("size", a.Configuration.APIClient.ParameterToString(size, ""))
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageResourceUsageInfo)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageByDay", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Returns aggregated endpoint usage information by hour
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
 * @param method Filter for a certain endpoint method.  Must include url as well to work
 * @param url Filter for a certain endpoint.  Must include method as well to work
 * @param size The number of objects returned per page
 * @param page The number of the page returned, starting with 1
 * @return *PageResourceUsageInfo
 */
func (a ReportingUsageApi) GetUsageByHour(startDate int64, endDate int64, combineEndpoints bool, method string, url string, size int32, page int32) (*PageResourceUsageInfo, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))
	localVarQueryParams.Add("combine_endpoints", a.Configuration.APIClient.ParameterToString(combineEndpoints, ""))
	localVarQueryParams.Add("method", a.Configuration.APIClient.ParameterToString(method, ""))
	localVarQueryParams.Add("url", a.Configuration.APIClient.ParameterToString(url, ""))
	localVarQueryParams.Add("size", a.Configuration.APIClient.ParameterToString(size, ""))
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageResourceUsageInfo)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageByHour", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Returns aggregated endpoint usage information by minute
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
 * @param method Filter for a certain endpoint method.  Must include url as well to work
 * @param url Filter for a certain endpoint.  Must include method as well to work
 * @param size The number of objects returned per page
 * @param page The number of the page returned, starting with 1
 * @return *PageResourceUsageInfo
 */
func (a ReportingUsageApi) GetUsageByMinute(startDate int64, endDate int64, combineEndpoints bool, method string, url string, size int32, page int32) (*PageResourceUsageInfo, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/minute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))
	localVarQueryParams.Add("combine_endpoints", a.Configuration.APIClient.ParameterToString(combineEndpoints, ""))
	localVarQueryParams.Add("method", a.Configuration.APIClient.ParameterToString(method, ""))
	localVarQueryParams.Add("url", a.Configuration.APIClient.ParameterToString(url, ""))
	localVarQueryParams.Add("size", a.Configuration.APIClient.ParameterToString(size, ""))
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageResourceUsageInfo)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageByMinute", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Returns aggregated endpoint usage information by month
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
 * @param method Filter for a certain endpoint method.  Must include url as well to work
 * @param url Filter for a certain endpoint.  Must include method as well to work
 * @param size The number of objects returned per page
 * @param page The number of the page returned, starting with 1
 * @return *PageResourceUsageInfo
 */
func (a ReportingUsageApi) GetUsageByMonth(startDate int64, endDate int64, combineEndpoints bool, method string, url string, size int32, page int32) (*PageResourceUsageInfo, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/month"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))
	localVarQueryParams.Add("combine_endpoints", a.Configuration.APIClient.ParameterToString(combineEndpoints, ""))
	localVarQueryParams.Add("method", a.Configuration.APIClient.ParameterToString(method, ""))
	localVarQueryParams.Add("url", a.Configuration.APIClient.ParameterToString(url, ""))
	localVarQueryParams.Add("size", a.Configuration.APIClient.ParameterToString(size, ""))
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageResourceUsageInfo)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageByMonth", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Returns aggregated endpoint usage information by year
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @param combineEndpoints Whether to combine counts from different endpoints. Removes the url and method from the result object
 * @param method Filter for a certain endpoint method.  Must include url as well to work
 * @param url Filter for a certain endpoint.  Must include method as well to work
 * @param size The number of objects returned per page
 * @param page The number of the page returned, starting with 1
 * @return *PageResourceUsageInfo
 */
func (a ReportingUsageApi) GetUsageByYear(startDate int64, endDate int64, combineEndpoints bool, method string, url string, size int32, page int32) (*PageResourceUsageInfo, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/year"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))
	localVarQueryParams.Add("combine_endpoints", a.Configuration.APIClient.ParameterToString(combineEndpoints, ""))
	localVarQueryParams.Add("method", a.Configuration.APIClient.ParameterToString(method, ""))
	localVarQueryParams.Add("url", a.Configuration.APIClient.ParameterToString(url, ""))
	localVarQueryParams.Add("size", a.Configuration.APIClient.ParameterToString(size, ""))
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(PageResourceUsageInfo)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageByYear", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Returns list of endpoints called (method and url)
 *
 * @param startDate The beginning of the range being requested, unix timestamp in seconds
 * @param endDate The ending of the range being requested, unix timestamp in seconds
 * @return []string
 */
func (a ReportingUsageApi) GetUsageEndpoints(startDate int64, endDate int64) ([]string, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/reporting/usage/endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(OAuth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("start_date", a.Configuration.APIClient.ParameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", a.Configuration.APIClient.ParameterToString(endDate, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]string)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetUsageEndpoints", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return *successPayload, localVarAPIResponse, err
}


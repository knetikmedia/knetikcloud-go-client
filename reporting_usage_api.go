/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
)

// Linger please
var (
	_ context.Context
)

type ReportingUsageApiService service


/* ReportingUsageApiService Returns aggregated endpoint usage information by day
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "combineEndpoints" (bool) Whether to combine counts from different endpoint. Removes the url and method from the result object
     @param "method" (string) Filter for a certain endpoint method.  Must include url as well to work
     @param "url" (string) Filter for a certain endpoint.  Must include method as well to work
     @param "size" (int32) The number of objects returned per page
     @param "page" (int32) The number of the page returned, starting with 1
 @return PageResourceUsageInfo*/
func (a *ReportingUsageApiService) GetUsageByDay(ctx context.Context, startDate int64, endDate int64, localVarOptionals map[string]interface{}) (PageResourceUsageInfo,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  PageResourceUsageInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/day"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["combineEndpoints"], "bool", "combineEndpoints"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	if localVarTempParam, localVarOk := localVarOptionals["combineEndpoints"].(bool); localVarOk {
		localVarQueryParams.Add("combine_endpoints", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarQueryParams.Add("method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarQueryParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarQueryParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarQueryParams.Add("page", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* ReportingUsageApiService Returns aggregated endpoint usage information by hour
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "combineEndpoints" (bool) Whether to combine counts from different endpoint. Removes the url and method from the result object
     @param "method" (string) Filter for a certain endpoint method.  Must include url as well to work
     @param "url" (string) Filter for a certain endpoint.  Must include method as well to work
     @param "size" (int32) The number of objects returned per page
     @param "page" (int32) The number of the page returned, starting with 1
 @return PageResourceUsageInfo*/
func (a *ReportingUsageApiService) GetUsageByHour(ctx context.Context, startDate int64, endDate int64, localVarOptionals map[string]interface{}) (PageResourceUsageInfo,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  PageResourceUsageInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["combineEndpoints"], "bool", "combineEndpoints"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	if localVarTempParam, localVarOk := localVarOptionals["combineEndpoints"].(bool); localVarOk {
		localVarQueryParams.Add("combine_endpoints", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarQueryParams.Add("method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarQueryParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarQueryParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarQueryParams.Add("page", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* ReportingUsageApiService Returns aggregated endpoint usage information by minute
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "combineEndpoints" (bool) Whether to combine counts from different endpoint. Removes the url and method from the result object
     @param "method" (string) Filter for a certain endpoint method.  Must include url as well to work
     @param "url" (string) Filter for a certain endpoint.  Must include method as well to work
     @param "size" (int32) The number of objects returned per page
     @param "page" (int32) The number of the page returned, starting with 1
 @return PageResourceUsageInfo*/
func (a *ReportingUsageApiService) GetUsageByMinute(ctx context.Context, startDate int64, endDate int64, localVarOptionals map[string]interface{}) (PageResourceUsageInfo,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  PageResourceUsageInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/minute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["combineEndpoints"], "bool", "combineEndpoints"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	if localVarTempParam, localVarOk := localVarOptionals["combineEndpoints"].(bool); localVarOk {
		localVarQueryParams.Add("combine_endpoints", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarQueryParams.Add("method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarQueryParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarQueryParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarQueryParams.Add("page", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* ReportingUsageApiService Returns aggregated endpoint usage information by month
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "combineEndpoints" (bool) Whether to combine counts from different endpoint. Removes the url and method from the result object
     @param "method" (string) Filter for a certain endpoint method.  Must include url as well to work
     @param "url" (string) Filter for a certain endpoint.  Must include method as well to work
     @param "size" (int32) The number of objects returned per page
     @param "page" (int32) The number of the page returned, starting with 1
 @return PageResourceUsageInfo*/
func (a *ReportingUsageApiService) GetUsageByMonth(ctx context.Context, startDate int64, endDate int64, localVarOptionals map[string]interface{}) (PageResourceUsageInfo,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  PageResourceUsageInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/month"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["combineEndpoints"], "bool", "combineEndpoints"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	if localVarTempParam, localVarOk := localVarOptionals["combineEndpoints"].(bool); localVarOk {
		localVarQueryParams.Add("combine_endpoints", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarQueryParams.Add("method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarQueryParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarQueryParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarQueryParams.Add("page", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* ReportingUsageApiService Returns aggregated endpoint usage information by year
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "combineEndpoints" (bool) Whether to combine counts from different endpoints. Removes the url and method from the result object
     @param "method" (string) Filter for a certain endpoint method.  Must include url as well to work
     @param "url" (string) Filter for a certain endpoint.  Must include method as well to work
     @param "size" (int32) The number of objects returned per page
     @param "page" (int32) The number of the page returned, starting with 1
 @return PageResourceUsageInfo*/
func (a *ReportingUsageApiService) GetUsageByYear(ctx context.Context, startDate int64, endDate int64, localVarOptionals map[string]interface{}) (PageResourceUsageInfo,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  PageResourceUsageInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/year"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["combineEndpoints"], "bool", "combineEndpoints"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	if localVarTempParam, localVarOk := localVarOptionals["combineEndpoints"].(bool); localVarOk {
		localVarQueryParams.Add("combine_endpoints", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarQueryParams.Add("method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarQueryParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarQueryParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarQueryParams.Add("page", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* ReportingUsageApiService Returns list of endpoints called (method and url)
 &lt;b&gt;Permissions Needed:&lt;/b&gt; USAGE_ADMIN
 * @param ctx context.Context Authentication Context 
 @param startDate The beginning of the range being requested, unix timestamp in seconds
 @param endDate The ending of the range being requested, unix timestamp in seconds
 @return []string*/
func (a *ReportingUsageApiService) GetUsageEndpoints(ctx context.Context, startDate int64, endDate int64) ([]string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  []string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reporting/usage/endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	localVarQueryParams.Add("start_date", parameterToString(startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(endDate, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

